def find_parent(parent,x):
    if parent[x]!=x:
        return find_parent(parent,parent[x]) #루트노드 찾을때까지 재귀적으로 호출
    return x
'''def find_parent2(parent,x):
    if parent[x]!=x:
        parent[x]=find_parent2(parent,parent[x]) #***경로압축기법: 부모 테이블값을 갱신->시간 복잡도 개선(루트노드가 부모노드가 됨)
    return parent[x]'''
    
def union_parent(parent,a,b):
    a=find_parent(parent,a)
    b=find_parent(parent,b)
    if a<b:
        parent[b]=a
    else:
        parent[a]=b

v,e=map(int,input().split())
parent=[0]*(v+1)

for i in range(1,v+1):
    parent[i]=i #초기세팅

for i in range(e):          #union연산 수행
    a,b=map(int,input().split())
    union_parent(parent,a,b)

print('각 원소가 속한 집합: ',end='')
for i in range(1,v+1):
    print(find_parent(parent,i),end=' ')
print()

print('부모 테이블: ',end='')
for i in range(1,v+1):
    print(parent[i],end=' ')

# 시간복잡도:O(ElogV)
import heapq # 항상 가장 작은 값이 먼저 나오는 (최소)힙
import sys
input=sys.stdin.readline
INF=int(1e9)

n,m=map(int,input().split())
start=int(input())
graph=[[] for i in range(n+1)]
distance=[INF]*(n+1)

for _ in range(m):
    a,b,c=map(int,input().split())
    graph[a].append((b,c))

def dijkstra(start):
    q=[]
    heapq.heappush(q,(0,start))
    distance[start]=0
    while q:
        dist,now=heapq.heappop(q) # 0,1
        if distance[now]<dist: #0<0
            continue
        for i in graph[now]: 
            cost=dist+i[1] #2,5,1
            if cost < distance[i[0]]:
                distance[i[0]]=cost #갱신
                heapq.heappush(q,(cost,i[0]))

dijkstra(start)

for i in range(1,n+1):
    if distance[i]==INF:
        print("INFINITY")
    else:
        print(distance[i])
